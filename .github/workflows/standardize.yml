name: Standardize Properties

on:
  workflow_dispatch:
    inputs:
      canonical_limit:
        description: Number of properties to canonicalize
        required: true
        default: '6000'
      do_geocode:
        description: Also geocode distinct canonical addresses (true/false)
        required: true
        default: 'false'
      geocode_limit:
        description: Max distinct canonical addresses to geocode
        required: false
        default: '2500'
      sleep_ms:
        description: Milliseconds to sleep between geocode calls
        required: false
        default: '250'

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        run: |
          python -m venv .venv
          . .venv/bin/activate
          pip install --upgrade pip
          pip install -r scripts/setup/requirements.txt

      - name: Prefer IPv4 and pooled port
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          set -e
          pycmd=$(cat <<'PY'
import os, socket
dsn = os.environ['DATABASE_URL']
# Append hostaddr (IPv4) if missing to avoid IPv6-only attempts
if 'hostaddr=' not in dsn:
    try:
        host = dsn.split('//',1)[1].split('@',1)[-1].split(':',1)[0].split('/',1)[0]
        infos = socket.getaddrinfo(host, None, family=socket.AF_INET)
        if infos:
            ipv4 = infos[0][4][0]
            dsn = (dsn + ('&' if '?' in dsn else '?') + f'hostaddr={ipv4}')
    except Exception:
        pass
# Prefer pooler port 6543
dsn = dsn.replace(':5432/', ':6543/').replace(':6543/', ':6543/')
print(dsn)
PY
)
          NEW_DSN=$(python - <<PY
$pycmd
PY
)
          echo "DATABASE_URL=$NEW_DSN" >> $GITHUB_ENV

      - name: Canonicalize and optionally geocode
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          GEOCODIO_API_KEY: ${{ secrets.GEOCODIO_API_KEY }}
        run: |
          . ./.venv/bin/activate
          if [ "${{ github.event.inputs.do_geocode }}" = "true" ]; then
            ./scripts/run.sh standardize-properties \
              --canonical-limit "${{ github.event.inputs.canonical_limit }}" \
              --geocode-limit "${{ github.event.inputs.geocode_limit }}" \
              --sleep-ms "${{ github.event.inputs.sleep_ms }}"
          else
            ./scripts/run.sh standardize-properties \
              --canonical-limit "${{ github.event.inputs.canonical_limit }}" \
              --no-geocode
          fi

      - name: Print summary counts
        if: always()
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          . ./.venv/bin/activate
          python - << 'PY'
          import os, time
          import psycopg2
          dsn = os.environ['DATABASE_URL']
          last_err = None
          for i in range(6):
            try:
              with psycopg2.connect(dsn) as conn:
                with conn.cursor() as cur:
                  cur.execute("SELECT COUNT(*) FROM properties")
                  total = cur.fetchone()[0]
                  cur.execute("SELECT COUNT(*) FROM properties WHERE address_hash IS NOT NULL")
                  canon = cur.fetchone()[0]
                  missing = total - canon
                  print(f"Counts Summary: total={total}, canonicalized={canon}, missing={missing}")
                  raise SystemExit(0)
            except Exception as e:
              last_err = e
              time.sleep(1.5 * (i + 1))
          raise SystemExit(f"Failed to print counts after retries: {last_err}")
          PY
